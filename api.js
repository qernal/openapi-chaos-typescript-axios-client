"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Chaos
 * Central Management API - publicly exposed set of APIs for cloud resources
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: help@qernal.support
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokensApiAxiosParamCreator = exports.SecretsApi = exports.SecretsApiFactory = exports.SecretsApiFp = exports.SecretsApiAxiosParamCreator = exports.QuotasApi = exports.QuotasApiFactory = exports.QuotasApiFp = exports.QuotasApiAxiosParamCreator = exports.ProvidersApi = exports.ProvidersApiFactory = exports.ProvidersApiFp = exports.ProvidersApiAxiosParamCreator = exports.ProjectsApi = exports.ProjectsApiFactory = exports.ProjectsApiFp = exports.ProjectsApiAxiosParamCreator = exports.OrganisationsApi = exports.OrganisationsApiFactory = exports.OrganisationsApiFp = exports.OrganisationsApiAxiosParamCreator = exports.MetricsAggregationsListMetricAggregationTypeEnum = exports.MetricsApi = exports.MetricsApiFactory = exports.MetricsApiFp = exports.MetricsApiAxiosParamCreator = exports.LogsListFLogTypeEnum = exports.LogsApi = exports.LogsApiFactory = exports.LogsApiFp = exports.LogsApiAxiosParamCreator = exports.HostsApi = exports.HostsApiFactory = exports.HostsApiFp = exports.HostsApiAxiosParamCreator = exports.FunctionsApi = exports.FunctionsApiFactory = exports.FunctionsApiFp = exports.FunctionsApiAxiosParamCreator = exports.SecretMetaType = exports.SecretCreateType = exports.LogLogTypeEnum = exports.LogLogKindEnum = exports.LogLogStreamEnum = exports.HostVerificationStatus = exports.FunctionType = exports.FunctionScalingTypeEnum = exports.FunctionCompliance = exports.FunctionBodyVersionEnum = exports.FunctionVersionEnum = void 0;
exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TokensApi = exports.TokensApiFactory = exports.TokensApiFp = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.FunctionVersionEnum = {
    _1_0_0: '1.0.0'
};
exports.FunctionBodyVersionEnum = {
    _1_0_0: '1.0.0'
};
/**
 * Tagged requirements for compliance; soc2 = SOC2 compliant data centers ipv6 = Function can work within an ipv6 *only* cluster
 */
exports.FunctionCompliance = {
    soc2: 'soc2',
    ipv6: 'ipv6'
};
exports.FunctionScalingTypeEnum = {
    cpu: 'cpu',
    memory: 'memory'
};
/**
 * Type of function, worker types are not exposed to ingress routes
 */
exports.FunctionType = {
    http: 'http',
    worker: 'worker'
};
/**
 * Host verification status
 */
exports.HostVerificationStatus = {
    pending: 'pending',
    already_verified: 'already_verified',
    completed: 'completed',
    failed: 'failed'
};
exports.LogLogStreamEnum = {
    stdout: 'stdout',
    stderr: 'stderr'
};
exports.LogLogKindEnum = {
    event: 'event',
    log: 'log'
};
exports.LogLogTypeEnum = {
    info: 'info',
    error: 'error'
};
/**
 * Secrets types: registry, certificate, environment
 */
exports.SecretCreateType = {
    registry: 'registry',
    certificate: 'certificate',
    environment: 'environment'
};
/**
 * Secrets types: registry, certificate, environment, dek
 */
exports.SecretMetaType = {
    registry: 'registry',
    certificate: 'certificate',
    environment: 'environment',
    dek: 'dek'
};
/**
 * FunctionsApi - axios parameter creator
 */
var FunctionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a new function
         * @summary Create function
         * @param {FunctionBody} FunctionBody Create/Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsCreate: function (FunctionBody_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([FunctionBody_1], args_1, true), void 0, function (FunctionBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'FunctionBody' is not null or undefined
                            (0, common_1.assertParamExists)('functionsCreate', 'FunctionBody', FunctionBody);
                            localVarPath = "/functions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(FunctionBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a function (and all revisions)
         * @summary Delete function
         * @param {string} function_id Function ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsDelete: function (function_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([function_id_1], args_1, true), void 0, function (function_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'function_id' is not null or undefined
                            (0, common_1.assertParamExists)('functionsDelete', 'function_id', function_id);
                            localVarPath = "/functions/{function_id}"
                                .replace("{".concat("function_id", "}"), encodeURIComponent(String(function_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a specific function (latest revision)
         * @summary Get function (latest revision)
         * @param {string} function_id Function ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsGet: function (function_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([function_id_1], args_1, true), void 0, function (function_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'function_id' is not null or undefined
                            (0, common_1.assertParamExists)('functionsGet', 'function_id', function_id);
                            localVarPath = "/functions/{function_id}"
                                .replace("{".concat("function_id", "}"), encodeURIComponent(String(function_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a specific revision of a function
         * @summary Get a specific revision of a function
         * @param {string} function_id Function ID reference
         * @param {string} function_revision_id Function revision ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsRevisionsGet: function (function_id_1, function_revision_id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([function_id_1, function_revision_id_1], args_1, true), void 0, function (function_id, function_revision_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'function_id' is not null or undefined
                            (0, common_1.assertParamExists)('functionsRevisionsGet', 'function_id', function_id);
                            // verify required parameter 'function_revision_id' is not null or undefined
                            (0, common_1.assertParamExists)('functionsRevisionsGet', 'function_revision_id', function_revision_id);
                            localVarPath = "/functions/{function_id}/revisions/{function_revision_id}"
                                .replace("{".concat("function_id", "}"), encodeURIComponent(String(function_id)))
                                .replace("{".concat("function_revision_id", "}"), encodeURIComponent(String(function_revision_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all revisions for a function
         * @summary List all revisions for a function
         * @param {string} function_id Function ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsRevisionsList: function (function_id_1, page_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([function_id_1, page_1], args_1, true), void 0, function (function_id, page, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            // verify required parameter 'function_id' is not null or undefined
                            (0, common_1.assertParamExists)('functionsRevisionsList', 'function_id', function_id);
                            localVarPath = "/functions/{function_id}/revisions"
                                .replace("{".concat("function_id", "}"), encodeURIComponent(String(function_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _d.sent();
                            if (page !== undefined) {
                                for (_a = 0, _b = Object.entries(page); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a function (creates a new revision)
         * @summary Update function
         * @param {string} function_id Function ID reference
         * @param {Function} Function Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsUpdate: function (function_id_1, Function_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([function_id_1, Function_1], args_1, true), void 0, function (function_id, Function, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'function_id' is not null or undefined
                            (0, common_1.assertParamExists)('functionsUpdate', 'function_id', function_id);
                            // verify required parameter 'Function' is not null or undefined
                            (0, common_1.assertParamExists)('functionsUpdate', 'Function', Function);
                            localVarPath = "/functions/{function_id}"
                                .replace("{".concat("function_id", "}"), encodeURIComponent(String(function_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(Function, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all functions
         * @summary List all functions within a project
         * @param {string} project_id Project ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsFunctionsList: function (project_id_1, page_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, page_1], args_1, true), void 0, function (project_id, page, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsFunctionsList', 'project_id', project_id);
                            localVarPath = "/projects/{project_id}/functions"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _d.sent();
                            if (page !== undefined) {
                                for (_a = 0, _b = Object.entries(page); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.FunctionsApiAxiosParamCreator = FunctionsApiAxiosParamCreator;
/**
 * FunctionsApi - functional programming interface
 */
var FunctionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.FunctionsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a new function
         * @summary Create function
         * @param {FunctionBody} FunctionBody Create/Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsCreate: function (FunctionBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.functionsCreate(FunctionBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FunctionsApi.functionsCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete a function (and all revisions)
         * @summary Delete function
         * @param {string} function_id Function ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsDelete: function (function_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.functionsDelete(function_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FunctionsApi.functionsDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a specific function (latest revision)
         * @summary Get function (latest revision)
         * @param {string} function_id Function ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsGet: function (function_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.functionsGet(function_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FunctionsApi.functionsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a specific revision of a function
         * @summary Get a specific revision of a function
         * @param {string} function_id Function ID reference
         * @param {string} function_revision_id Function revision ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsRevisionsGet: function (function_id, function_revision_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.functionsRevisionsGet(function_id, function_revision_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FunctionsApi.functionsRevisionsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List all revisions for a function
         * @summary List all revisions for a function
         * @param {string} function_id Function ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsRevisionsList: function (function_id, page, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.functionsRevisionsList(function_id, page, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FunctionsApi.functionsRevisionsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update a function (creates a new revision)
         * @summary Update function
         * @param {string} function_id Function ID reference
         * @param {Function} Function Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsUpdate: function (function_id, Function, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.functionsUpdate(function_id, Function, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FunctionsApi.functionsUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List all functions
         * @summary List all functions within a project
         * @param {string} project_id Project ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsFunctionsList: function (project_id, page, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsFunctionsList(project_id, page, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FunctionsApi.projectsFunctionsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.FunctionsApiFp = FunctionsApiFp;
/**
 * FunctionsApi - factory interface
 */
var FunctionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.FunctionsApiFp)(configuration);
    return {
        /**
         * Create a new function
         * @summary Create function
         * @param {FunctionBody} FunctionBody Create/Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsCreate: function (FunctionBody, options) {
            return localVarFp.functionsCreate(FunctionBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a function (and all revisions)
         * @summary Delete function
         * @param {string} function_id Function ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsDelete: function (function_id, options) {
            return localVarFp.functionsDelete(function_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a specific function (latest revision)
         * @summary Get function (latest revision)
         * @param {string} function_id Function ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsGet: function (function_id, options) {
            return localVarFp.functionsGet(function_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a specific revision of a function
         * @summary Get a specific revision of a function
         * @param {string} function_id Function ID reference
         * @param {string} function_revision_id Function revision ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsRevisionsGet: function (function_id, function_revision_id, options) {
            return localVarFp.functionsRevisionsGet(function_id, function_revision_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all revisions for a function
         * @summary List all revisions for a function
         * @param {string} function_id Function ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsRevisionsList: function (function_id, page, options) {
            return localVarFp.functionsRevisionsList(function_id, page, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a function (creates a new revision)
         * @summary Update function
         * @param {string} function_id Function ID reference
         * @param {Function} Function Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionsUpdate: function (function_id, Function, options) {
            return localVarFp.functionsUpdate(function_id, Function, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all functions
         * @summary List all functions within a project
         * @param {string} project_id Project ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsFunctionsList: function (project_id, page, options) {
            return localVarFp.projectsFunctionsList(project_id, page, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.FunctionsApiFactory = FunctionsApiFactory;
/**
 * FunctionsApi - object-oriented interface
 */
var FunctionsApi = /** @class */ (function (_super) {
    __extends(FunctionsApi, _super);
    function FunctionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new function
     * @summary Create function
     * @param {FunctionBody} FunctionBody Create/Update any field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionsApi.prototype.functionsCreate = function (FunctionBody, options) {
        var _this = this;
        return (0, exports.FunctionsApiFp)(this.configuration).functionsCreate(FunctionBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a function (and all revisions)
     * @summary Delete function
     * @param {string} function_id Function ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionsApi.prototype.functionsDelete = function (function_id, options) {
        var _this = this;
        return (0, exports.FunctionsApiFp)(this.configuration).functionsDelete(function_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a specific function (latest revision)
     * @summary Get function (latest revision)
     * @param {string} function_id Function ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionsApi.prototype.functionsGet = function (function_id, options) {
        var _this = this;
        return (0, exports.FunctionsApiFp)(this.configuration).functionsGet(function_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a specific revision of a function
     * @summary Get a specific revision of a function
     * @param {string} function_id Function ID reference
     * @param {string} function_revision_id Function revision ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionsApi.prototype.functionsRevisionsGet = function (function_id, function_revision_id, options) {
        var _this = this;
        return (0, exports.FunctionsApiFp)(this.configuration).functionsRevisionsGet(function_id, function_revision_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all revisions for a function
     * @summary List all revisions for a function
     * @param {string} function_id Function ID reference
     * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionsApi.prototype.functionsRevisionsList = function (function_id, page, options) {
        var _this = this;
        return (0, exports.FunctionsApiFp)(this.configuration).functionsRevisionsList(function_id, page, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a function (creates a new revision)
     * @summary Update function
     * @param {string} function_id Function ID reference
     * @param {Function} Function Update any field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionsApi.prototype.functionsUpdate = function (function_id, Function, options) {
        var _this = this;
        return (0, exports.FunctionsApiFp)(this.configuration).functionsUpdate(function_id, Function, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all functions
     * @summary List all functions within a project
     * @param {string} project_id Project ID reference
     * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionsApi.prototype.projectsFunctionsList = function (project_id, page, options) {
        var _this = this;
        return (0, exports.FunctionsApiFp)(this.configuration).projectsFunctionsList(project_id, page, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FunctionsApi;
}(base_1.BaseAPI));
exports.FunctionsApi = FunctionsApi;
/**
 * HostsApi - axios parameter creator
 */
var HostsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Assign a host/domain to a project - hosts are globally unique and require verification, so a host cannot be assigned to multiple projects.  A host can be a valid domain, either a root domain or a subdomain.
         * @summary Create host for project
         * @param {string} project_id Project ID reference
         * @param {HostBody} HostBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsCreate: function (project_id_1, HostBody_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, HostBody_1], args_1, true), void 0, function (project_id, HostBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsHostsCreate', 'project_id', project_id);
                            // verify required parameter 'HostBody' is not null or undefined
                            (0, common_1.assertParamExists)('projectsHostsCreate', 'HostBody', HostBody);
                            localVarPath = "/projects/{project_id}/hosts"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(HostBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete specific host by hostname
         * @param {string} project_id Project ID reference
         * @param {string} hostname Hostname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsDelete: function (project_id_1, hostname_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, hostname_1], args_1, true), void 0, function (project_id, hostname, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsHostsDelete', 'project_id', project_id);
                            // verify required parameter 'hostname' is not null or undefined
                            (0, common_1.assertParamExists)('projectsHostsDelete', 'hostname', hostname);
                            localVarPath = "/projects/{project_id}/hosts/{hostname}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)))
                                .replace("{".concat("hostname", "}"), encodeURIComponent(String(hostname)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific host by hostname
         * @param {string} project_id Project ID reference
         * @param {string} hostname Hostname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsGet: function (project_id_1, hostname_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, hostname_1], args_1, true), void 0, function (project_id, hostname, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsHostsGet', 'project_id', project_id);
                            // verify required parameter 'hostname' is not null or undefined
                            (0, common_1.assertParamExists)('projectsHostsGet', 'hostname', hostname);
                            localVarPath = "/projects/{project_id}/hosts/{hostname}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)))
                                .replace("{".concat("hostname", "}"), encodeURIComponent(String(hostname)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List hosts for project
         * @param {string} project_id Project ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsList: function (project_id_1, page_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, page_1], args_1, true), void 0, function (project_id, page, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsHostsList', 'project_id', project_id);
                            localVarPath = "/projects/{project_id}/hosts"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _d.sent();
                            if (page !== undefined) {
                                for (_a = 0, _b = Object.entries(page); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update specific host by hostname
         * @param {string} project_id Project ID reference
         * @param {string} hostname Hostname
         * @param {HostBodyPatch} HostBodyPatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsUpdate: function (project_id_1, hostname_1, HostBodyPatch_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, hostname_1, HostBodyPatch_1], args_1, true), void 0, function (project_id, hostname, HostBodyPatch, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsHostsUpdate', 'project_id', project_id);
                            // verify required parameter 'hostname' is not null or undefined
                            (0, common_1.assertParamExists)('projectsHostsUpdate', 'hostname', hostname);
                            // verify required parameter 'HostBodyPatch' is not null or undefined
                            (0, common_1.assertParamExists)('projectsHostsUpdate', 'HostBodyPatch', HostBodyPatch);
                            localVarPath = "/projects/{project_id}/hosts/{hostname}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)))
                                .replace("{".concat("hostname", "}"), encodeURIComponent(String(hostname)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(HostBodyPatch, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Schedule host verification task
         * @param {string} project_id Project ID reference
         * @param {string} hostname Hostname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsVerifyCreate: function (project_id_1, hostname_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, hostname_1], args_1, true), void 0, function (project_id, hostname, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsHostsVerifyCreate', 'project_id', project_id);
                            // verify required parameter 'hostname' is not null or undefined
                            (0, common_1.assertParamExists)('projectsHostsVerifyCreate', 'hostname', hostname);
                            localVarPath = "/projects/{project_id}/hosts/{hostname}/verify"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)))
                                .replace("{".concat("hostname", "}"), encodeURIComponent(String(hostname)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.HostsApiAxiosParamCreator = HostsApiAxiosParamCreator;
/**
 * HostsApi - functional programming interface
 */
var HostsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.HostsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Assign a host/domain to a project - hosts are globally unique and require verification, so a host cannot be assigned to multiple projects.  A host can be a valid domain, either a root domain or a subdomain.
         * @summary Create host for project
         * @param {string} project_id Project ID reference
         * @param {HostBody} HostBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsCreate: function (project_id, HostBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsHostsCreate(project_id, HostBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HostsApi.projectsHostsCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete specific host by hostname
         * @param {string} project_id Project ID reference
         * @param {string} hostname Hostname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsDelete: function (project_id, hostname, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsHostsDelete(project_id, hostname, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HostsApi.projectsHostsDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific host by hostname
         * @param {string} project_id Project ID reference
         * @param {string} hostname Hostname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsGet: function (project_id, hostname, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsHostsGet(project_id, hostname, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HostsApi.projectsHostsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary List hosts for project
         * @param {string} project_id Project ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsList: function (project_id, page, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsHostsList(project_id, page, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HostsApi.projectsHostsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update specific host by hostname
         * @param {string} project_id Project ID reference
         * @param {string} hostname Hostname
         * @param {HostBodyPatch} HostBodyPatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsUpdate: function (project_id, hostname, HostBodyPatch, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsHostsUpdate(project_id, hostname, HostBodyPatch, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HostsApi.projectsHostsUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Schedule host verification task
         * @param {string} project_id Project ID reference
         * @param {string} hostname Hostname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsVerifyCreate: function (project_id, hostname, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsHostsVerifyCreate(project_id, hostname, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HostsApi.projectsHostsVerifyCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.HostsApiFp = HostsApiFp;
/**
 * HostsApi - factory interface
 */
var HostsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.HostsApiFp)(configuration);
    return {
        /**
         * Assign a host/domain to a project - hosts are globally unique and require verification, so a host cannot be assigned to multiple projects.  A host can be a valid domain, either a root domain or a subdomain.
         * @summary Create host for project
         * @param {string} project_id Project ID reference
         * @param {HostBody} HostBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsCreate: function (project_id, HostBody, options) {
            return localVarFp.projectsHostsCreate(project_id, HostBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete specific host by hostname
         * @param {string} project_id Project ID reference
         * @param {string} hostname Hostname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsDelete: function (project_id, hostname, options) {
            return localVarFp.projectsHostsDelete(project_id, hostname, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get specific host by hostname
         * @param {string} project_id Project ID reference
         * @param {string} hostname Hostname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsGet: function (project_id, hostname, options) {
            return localVarFp.projectsHostsGet(project_id, hostname, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List hosts for project
         * @param {string} project_id Project ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsList: function (project_id, page, options) {
            return localVarFp.projectsHostsList(project_id, page, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Update specific host by hostname
         * @param {string} project_id Project ID reference
         * @param {string} hostname Hostname
         * @param {HostBodyPatch} HostBodyPatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsUpdate: function (project_id, hostname, HostBodyPatch, options) {
            return localVarFp.projectsHostsUpdate(project_id, hostname, HostBodyPatch, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Schedule host verification task
         * @param {string} project_id Project ID reference
         * @param {string} hostname Hostname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHostsVerifyCreate: function (project_id, hostname, options) {
            return localVarFp.projectsHostsVerifyCreate(project_id, hostname, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.HostsApiFactory = HostsApiFactory;
/**
 * HostsApi - object-oriented interface
 */
var HostsApi = /** @class */ (function (_super) {
    __extends(HostsApi, _super);
    function HostsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Assign a host/domain to a project - hosts are globally unique and require verification, so a host cannot be assigned to multiple projects.  A host can be a valid domain, either a root domain or a subdomain.
     * @summary Create host for project
     * @param {string} project_id Project ID reference
     * @param {HostBody} HostBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    HostsApi.prototype.projectsHostsCreate = function (project_id, HostBody, options) {
        var _this = this;
        return (0, exports.HostsApiFp)(this.configuration).projectsHostsCreate(project_id, HostBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete specific host by hostname
     * @param {string} project_id Project ID reference
     * @param {string} hostname Hostname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    HostsApi.prototype.projectsHostsDelete = function (project_id, hostname, options) {
        var _this = this;
        return (0, exports.HostsApiFp)(this.configuration).projectsHostsDelete(project_id, hostname, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get specific host by hostname
     * @param {string} project_id Project ID reference
     * @param {string} hostname Hostname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    HostsApi.prototype.projectsHostsGet = function (project_id, hostname, options) {
        var _this = this;
        return (0, exports.HostsApiFp)(this.configuration).projectsHostsGet(project_id, hostname, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List hosts for project
     * @param {string} project_id Project ID reference
     * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    HostsApi.prototype.projectsHostsList = function (project_id, page, options) {
        var _this = this;
        return (0, exports.HostsApiFp)(this.configuration).projectsHostsList(project_id, page, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Update specific host by hostname
     * @param {string} project_id Project ID reference
     * @param {string} hostname Hostname
     * @param {HostBodyPatch} HostBodyPatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    HostsApi.prototype.projectsHostsUpdate = function (project_id, hostname, HostBodyPatch, options) {
        var _this = this;
        return (0, exports.HostsApiFp)(this.configuration).projectsHostsUpdate(project_id, hostname, HostBodyPatch, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Schedule host verification task
     * @param {string} project_id Project ID reference
     * @param {string} hostname Hostname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    HostsApi.prototype.projectsHostsVerifyCreate = function (project_id, hostname, options) {
        var _this = this;
        return (0, exports.HostsApiFp)(this.configuration).projectsHostsVerifyCreate(project_id, hostname, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return HostsApi;
}(base_1.BaseAPI));
exports.HostsApi = HostsApi;
/**
 * LogsApi - axios parameter creator
 */
var LogsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieve logs for a specific project or function. Use the query parameter to search logs.  > Note: Logs are always returned in a descending order based on the timestamp. > Note: A max size of 500 logs is returned per request (when using page[size]).
         * @summary Get logs
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {string} [f_project] Project uuid reference
         * @param {string} [f_function] Function uuid reference
         * @param {LogsListFTimestampsParameter} [f_timestamps] Timestamp restriction for query
         * @param {string} [f_query] Text query string
         * @param {LogsListFLogTypeEnum} [f_log_type] Type of log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsList: function (page_1, f_project_1, f_function_1, f_timestamps_1, f_query_1, f_log_type_1) {
            var args_1 = [];
            for (var _i = 6; _i < arguments.length; _i++) {
                args_1[_i - 6] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([page_1, f_project_1, f_function_1, f_timestamps_1, f_query_1, f_log_type_1], args_1, true), void 0, function (page, f_project, f_function, f_timestamps, f_query, f_log_type, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, _d, _e, _f, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            localVarPath = "/logs";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _g.sent();
                            if (page !== undefined) {
                                for (_a = 0, _b = Object.entries(page); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (f_project !== undefined) {
                                localVarQueryParameter['f_project'] = f_project;
                            }
                            if (f_function !== undefined) {
                                localVarQueryParameter['f_function'] = f_function;
                            }
                            if (f_timestamps !== undefined) {
                                for (_d = 0, _e = Object.entries(f_timestamps); _d < _e.length; _d++) {
                                    _f = _e[_d], key = _f[0], value = _f[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (f_query !== undefined) {
                                localVarQueryParameter['f_query'] = f_query;
                            }
                            if (f_log_type !== undefined) {
                                localVarQueryParameter['f_log_type'] = f_log_type;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.LogsApiAxiosParamCreator = LogsApiAxiosParamCreator;
/**
 * LogsApi - functional programming interface
 */
var LogsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.LogsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieve logs for a specific project or function. Use the query parameter to search logs.  > Note: Logs are always returned in a descending order based on the timestamp. > Note: A max size of 500 logs is returned per request (when using page[size]).
         * @summary Get logs
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {string} [f_project] Project uuid reference
         * @param {string} [f_function] Function uuid reference
         * @param {LogsListFTimestampsParameter} [f_timestamps] Timestamp restriction for query
         * @param {string} [f_query] Text query string
         * @param {LogsListFLogTypeEnum} [f_log_type] Type of log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsList: function (page, f_project, f_function, f_timestamps, f_query, f_log_type, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.logsList(page, f_project, f_function, f_timestamps, f_query, f_log_type, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LogsApi.logsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.LogsApiFp = LogsApiFp;
/**
 * LogsApi - factory interface
 */
var LogsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.LogsApiFp)(configuration);
    return {
        /**
         * Retrieve logs for a specific project or function. Use the query parameter to search logs.  > Note: Logs are always returned in a descending order based on the timestamp. > Note: A max size of 500 logs is returned per request (when using page[size]).
         * @summary Get logs
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {string} [f_project] Project uuid reference
         * @param {string} [f_function] Function uuid reference
         * @param {LogsListFTimestampsParameter} [f_timestamps] Timestamp restriction for query
         * @param {string} [f_query] Text query string
         * @param {LogsListFLogTypeEnum} [f_log_type] Type of log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsList: function (page, f_project, f_function, f_timestamps, f_query, f_log_type, options) {
            return localVarFp.logsList(page, f_project, f_function, f_timestamps, f_query, f_log_type, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LogsApiFactory = LogsApiFactory;
/**
 * LogsApi - object-oriented interface
 */
var LogsApi = /** @class */ (function (_super) {
    __extends(LogsApi, _super);
    function LogsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieve logs for a specific project or function. Use the query parameter to search logs.  > Note: Logs are always returned in a descending order based on the timestamp. > Note: A max size of 500 logs is returned per request (when using page[size]).
     * @summary Get logs
     * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
     * @param {string} [f_project] Project uuid reference
     * @param {string} [f_function] Function uuid reference
     * @param {LogsListFTimestampsParameter} [f_timestamps] Timestamp restriction for query
     * @param {string} [f_query] Text query string
     * @param {LogsListFLogTypeEnum} [f_log_type] Type of log
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    LogsApi.prototype.logsList = function (page, f_project, f_function, f_timestamps, f_query, f_log_type, options) {
        var _this = this;
        return (0, exports.LogsApiFp)(this.configuration).logsList(page, f_project, f_function, f_timestamps, f_query, f_log_type, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LogsApi;
}(base_1.BaseAPI));
exports.LogsApi = LogsApi;
exports.LogsListFLogTypeEnum = {
    info: 'info',
    error: 'error'
};
/**
 * MetricsApi - axios parameter creator
 */
var MetricsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieve metrics for a specific project or function. Use the query parameter to request a metrics report.  > Note: Metrics are always returned in a descending order based on the timestamp.
         * @summary Get metrics
         * @param {MetricsAggregationsListMetricAggregationTypeEnum} metric_aggregation_type Metric aggregation type, types can be used with either a project or a function filter.  - httprequests: Aggregated HTTP requests - resourcestats: Aggregated resource stats (such as CPU, Memory and Network)  &gt; Note: aggregations cannot return more than 300 data points
         * @param {string} [f_project] Project uuid reference
         * @param {string} [f_function] Function uuid reference
         * @param {LogsListFTimestampsParameter} [f_timestamps] Timestamp restriction for query
         * @param {number} [f_histogram_interval] Histogram interval
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsAggregationsList: function (metric_aggregation_type_1, f_project_1, f_function_1, f_timestamps_1, f_histogram_interval_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([metric_aggregation_type_1, f_project_1, f_function_1, f_timestamps_1, f_histogram_interval_1], args_1, true), void 0, function (metric_aggregation_type, f_project, f_function, f_timestamps, f_histogram_interval, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            // verify required parameter 'metric_aggregation_type' is not null or undefined
                            (0, common_1.assertParamExists)('metricsAggregationsList', 'metric_aggregation_type', metric_aggregation_type);
                            localVarPath = "/metrics/aggregations/{metric_aggregation_type}"
                                .replace("{".concat("metric_aggregation_type", "}"), encodeURIComponent(String(metric_aggregation_type)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _d.sent();
                            if (f_project !== undefined) {
                                localVarQueryParameter['f_project'] = f_project;
                            }
                            if (f_function !== undefined) {
                                localVarQueryParameter['f_function'] = f_function;
                            }
                            if (f_timestamps !== undefined) {
                                for (_a = 0, _b = Object.entries(f_timestamps); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (f_histogram_interval !== undefined) {
                                localVarQueryParameter['f_histogram_interval'] = f_histogram_interval;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.MetricsApiAxiosParamCreator = MetricsApiAxiosParamCreator;
/**
 * MetricsApi - functional programming interface
 */
var MetricsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.MetricsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieve metrics for a specific project or function. Use the query parameter to request a metrics report.  > Note: Metrics are always returned in a descending order based on the timestamp.
         * @summary Get metrics
         * @param {MetricsAggregationsListMetricAggregationTypeEnum} metric_aggregation_type Metric aggregation type, types can be used with either a project or a function filter.  - httprequests: Aggregated HTTP requests - resourcestats: Aggregated resource stats (such as CPU, Memory and Network)  &gt; Note: aggregations cannot return more than 300 data points
         * @param {string} [f_project] Project uuid reference
         * @param {string} [f_function] Function uuid reference
         * @param {LogsListFTimestampsParameter} [f_timestamps] Timestamp restriction for query
         * @param {number} [f_histogram_interval] Histogram interval
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsAggregationsList: function (metric_aggregation_type, f_project, f_function, f_timestamps, f_histogram_interval, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.metricsAggregationsList(metric_aggregation_type, f_project, f_function, f_timestamps, f_histogram_interval, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MetricsApi.metricsAggregationsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.MetricsApiFp = MetricsApiFp;
/**
 * MetricsApi - factory interface
 */
var MetricsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.MetricsApiFp)(configuration);
    return {
        /**
         * Retrieve metrics for a specific project or function. Use the query parameter to request a metrics report.  > Note: Metrics are always returned in a descending order based on the timestamp.
         * @summary Get metrics
         * @param {MetricsAggregationsListMetricAggregationTypeEnum} metric_aggregation_type Metric aggregation type, types can be used with either a project or a function filter.  - httprequests: Aggregated HTTP requests - resourcestats: Aggregated resource stats (such as CPU, Memory and Network)  &gt; Note: aggregations cannot return more than 300 data points
         * @param {string} [f_project] Project uuid reference
         * @param {string} [f_function] Function uuid reference
         * @param {LogsListFTimestampsParameter} [f_timestamps] Timestamp restriction for query
         * @param {number} [f_histogram_interval] Histogram interval
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsAggregationsList: function (metric_aggregation_type, f_project, f_function, f_timestamps, f_histogram_interval, options) {
            return localVarFp.metricsAggregationsList(metric_aggregation_type, f_project, f_function, f_timestamps, f_histogram_interval, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.MetricsApiFactory = MetricsApiFactory;
/**
 * MetricsApi - object-oriented interface
 */
var MetricsApi = /** @class */ (function (_super) {
    __extends(MetricsApi, _super);
    function MetricsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieve metrics for a specific project or function. Use the query parameter to request a metrics report.  > Note: Metrics are always returned in a descending order based on the timestamp.
     * @summary Get metrics
     * @param {MetricsAggregationsListMetricAggregationTypeEnum} metric_aggregation_type Metric aggregation type, types can be used with either a project or a function filter.  - httprequests: Aggregated HTTP requests - resourcestats: Aggregated resource stats (such as CPU, Memory and Network)  &gt; Note: aggregations cannot return more than 300 data points
     * @param {string} [f_project] Project uuid reference
     * @param {string} [f_function] Function uuid reference
     * @param {LogsListFTimestampsParameter} [f_timestamps] Timestamp restriction for query
     * @param {number} [f_histogram_interval] Histogram interval
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    MetricsApi.prototype.metricsAggregationsList = function (metric_aggregation_type, f_project, f_function, f_timestamps, f_histogram_interval, options) {
        var _this = this;
        return (0, exports.MetricsApiFp)(this.configuration).metricsAggregationsList(metric_aggregation_type, f_project, f_function, f_timestamps, f_histogram_interval, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MetricsApi;
}(base_1.BaseAPI));
exports.MetricsApi = MetricsApi;
exports.MetricsAggregationsListMetricAggregationTypeEnum = {
    httprequests: 'httprequests',
    resourcestats: 'resourcestats'
};
/**
 * OrganisationsApi - axios parameter creator
 */
var OrganisationsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create an organisation
         * @summary Create organisations
         * @param {OrganisationBody} [OrganisationBody] Create/Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsCreate: function (OrganisationBody_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([OrganisationBody_1], args_1, true), void 0, function (OrganisationBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/organisations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(OrganisationBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete organisation, this will also delete all the resources within the organisation
         * @summary Delete an organisation
         * @param {string} organisation_id Organisation ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsDelete: function (organisation_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([organisation_id_1], args_1, true), void 0, function (organisation_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'organisation_id' is not null or undefined
                            (0, common_1.assertParamExists)('organisationsDelete', 'organisation_id', organisation_id);
                            localVarPath = "/organisations/{organisation_id}"
                                .replace("{".concat("organisation_id", "}"), encodeURIComponent(String(organisation_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a single organisation
         * @summary Get an organisation
         * @param {string} organisation_id Organisation ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsGet: function (organisation_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([organisation_id_1], args_1, true), void 0, function (organisation_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'organisation_id' is not null or undefined
                            (0, common_1.assertParamExists)('organisationsGet', 'organisation_id', organisation_id);
                            localVarPath = "/organisations/{organisation_id}"
                                .replace("{".concat("organisation_id", "}"), encodeURIComponent(String(organisation_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List organisations
         * @summary List organisations
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {string} [f_name] Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsList: function (page_1, f_name_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([page_1, f_name_1], args_1, true), void 0, function (page, f_name, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/organisations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _d.sent();
                            if (page !== undefined) {
                                for (_a = 0, _b = Object.entries(page); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (f_name !== undefined) {
                                localVarQueryParameter['f_name'] = f_name;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a specific quota for an organisation
         * @summary Get specific organisation quota
         * @param {string} organisation_id Organisation ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsQuotasGet: function (organisation_id_1, quota_entity_quota_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([organisation_id_1, quota_entity_quota_1], args_1, true), void 0, function (organisation_id, quota_entity_quota, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'organisation_id' is not null or undefined
                            (0, common_1.assertParamExists)('organisationsQuotasGet', 'organisation_id', organisation_id);
                            // verify required parameter 'quota_entity_quota' is not null or undefined
                            (0, common_1.assertParamExists)('organisationsQuotasGet', 'quota_entity_quota', quota_entity_quota);
                            localVarPath = "/organisations/{organisation_id}/quotas/{quota_entity_quota}"
                                .replace("{".concat("organisation_id", "}"), encodeURIComponent(String(organisation_id)))
                                .replace("{".concat("quota_entity_quota", "}"), encodeURIComponent(String(quota_entity_quota)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get the quotas for an organisation
         * @summary List organisation quotas
         * @param {string} organisation_id Organisation ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsQuotasList: function (organisation_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([organisation_id_1], args_1, true), void 0, function (organisation_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'organisation_id' is not null or undefined
                            (0, common_1.assertParamExists)('organisationsQuotasList', 'organisation_id', organisation_id);
                            localVarPath = "/organisations/{organisation_id}/quotas"
                                .replace("{".concat("organisation_id", "}"), encodeURIComponent(String(organisation_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update an organisation
         * @summary Update an organisation
         * @param {string} organisation_id Organisation ID reference
         * @param {OrganisationBody} [OrganisationBody] Create/Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsUpdate: function (organisation_id_1, OrganisationBody_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([organisation_id_1, OrganisationBody_1], args_1, true), void 0, function (organisation_id, OrganisationBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'organisation_id' is not null or undefined
                            (0, common_1.assertParamExists)('organisationsUpdate', 'organisation_id', organisation_id);
                            localVarPath = "/organisations/{organisation_id}"
                                .replace("{".concat("organisation_id", "}"), encodeURIComponent(String(organisation_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(OrganisationBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OrganisationsApiAxiosParamCreator = OrganisationsApiAxiosParamCreator;
/**
 * OrganisationsApi - functional programming interface
 */
var OrganisationsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OrganisationsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create an organisation
         * @summary Create organisations
         * @param {OrganisationBody} [OrganisationBody] Create/Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsCreate: function (OrganisationBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.organisationsCreate(OrganisationBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OrganisationsApi.organisationsCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete organisation, this will also delete all the resources within the organisation
         * @summary Delete an organisation
         * @param {string} organisation_id Organisation ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsDelete: function (organisation_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.organisationsDelete(organisation_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OrganisationsApi.organisationsDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a single organisation
         * @summary Get an organisation
         * @param {string} organisation_id Organisation ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsGet: function (organisation_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.organisationsGet(organisation_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OrganisationsApi.organisationsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List organisations
         * @summary List organisations
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {string} [f_name] Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsList: function (page, f_name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.organisationsList(page, f_name, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OrganisationsApi.organisationsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a specific quota for an organisation
         * @summary Get specific organisation quota
         * @param {string} organisation_id Organisation ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsQuotasGet: function (organisation_id, quota_entity_quota, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.organisationsQuotasGet(organisation_id, quota_entity_quota, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OrganisationsApi.organisationsQuotasGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get the quotas for an organisation
         * @summary List organisation quotas
         * @param {string} organisation_id Organisation ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsQuotasList: function (organisation_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.organisationsQuotasList(organisation_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OrganisationsApi.organisationsQuotasList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update an organisation
         * @summary Update an organisation
         * @param {string} organisation_id Organisation ID reference
         * @param {OrganisationBody} [OrganisationBody] Create/Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsUpdate: function (organisation_id, OrganisationBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.organisationsUpdate(organisation_id, OrganisationBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OrganisationsApi.organisationsUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.OrganisationsApiFp = OrganisationsApiFp;
/**
 * OrganisationsApi - factory interface
 */
var OrganisationsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OrganisationsApiFp)(configuration);
    return {
        /**
         * Create an organisation
         * @summary Create organisations
         * @param {OrganisationBody} [OrganisationBody] Create/Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsCreate: function (OrganisationBody, options) {
            return localVarFp.organisationsCreate(OrganisationBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete organisation, this will also delete all the resources within the organisation
         * @summary Delete an organisation
         * @param {string} organisation_id Organisation ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsDelete: function (organisation_id, options) {
            return localVarFp.organisationsDelete(organisation_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a single organisation
         * @summary Get an organisation
         * @param {string} organisation_id Organisation ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsGet: function (organisation_id, options) {
            return localVarFp.organisationsGet(organisation_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List organisations
         * @summary List organisations
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {string} [f_name] Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsList: function (page, f_name, options) {
            return localVarFp.organisationsList(page, f_name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a specific quota for an organisation
         * @summary Get specific organisation quota
         * @param {string} organisation_id Organisation ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsQuotasGet: function (organisation_id, quota_entity_quota, options) {
            return localVarFp.organisationsQuotasGet(organisation_id, quota_entity_quota, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the quotas for an organisation
         * @summary List organisation quotas
         * @param {string} organisation_id Organisation ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsQuotasList: function (organisation_id, options) {
            return localVarFp.organisationsQuotasList(organisation_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update an organisation
         * @summary Update an organisation
         * @param {string} organisation_id Organisation ID reference
         * @param {OrganisationBody} [OrganisationBody] Create/Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsUpdate: function (organisation_id, OrganisationBody, options) {
            return localVarFp.organisationsUpdate(organisation_id, OrganisationBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OrganisationsApiFactory = OrganisationsApiFactory;
/**
 * OrganisationsApi - object-oriented interface
 */
var OrganisationsApi = /** @class */ (function (_super) {
    __extends(OrganisationsApi, _super);
    function OrganisationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create an organisation
     * @summary Create organisations
     * @param {OrganisationBody} [OrganisationBody] Create/Update any field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    OrganisationsApi.prototype.organisationsCreate = function (OrganisationBody, options) {
        var _this = this;
        return (0, exports.OrganisationsApiFp)(this.configuration).organisationsCreate(OrganisationBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete organisation, this will also delete all the resources within the organisation
     * @summary Delete an organisation
     * @param {string} organisation_id Organisation ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    OrganisationsApi.prototype.organisationsDelete = function (organisation_id, options) {
        var _this = this;
        return (0, exports.OrganisationsApiFp)(this.configuration).organisationsDelete(organisation_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a single organisation
     * @summary Get an organisation
     * @param {string} organisation_id Organisation ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    OrganisationsApi.prototype.organisationsGet = function (organisation_id, options) {
        var _this = this;
        return (0, exports.OrganisationsApiFp)(this.configuration).organisationsGet(organisation_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List organisations
     * @summary List organisations
     * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
     * @param {string} [f_name] Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    OrganisationsApi.prototype.organisationsList = function (page, f_name, options) {
        var _this = this;
        return (0, exports.OrganisationsApiFp)(this.configuration).organisationsList(page, f_name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a specific quota for an organisation
     * @summary Get specific organisation quota
     * @param {string} organisation_id Organisation ID reference
     * @param {string} quota_entity_quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    OrganisationsApi.prototype.organisationsQuotasGet = function (organisation_id, quota_entity_quota, options) {
        var _this = this;
        return (0, exports.OrganisationsApiFp)(this.configuration).organisationsQuotasGet(organisation_id, quota_entity_quota, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the quotas for an organisation
     * @summary List organisation quotas
     * @param {string} organisation_id Organisation ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    OrganisationsApi.prototype.organisationsQuotasList = function (organisation_id, options) {
        var _this = this;
        return (0, exports.OrganisationsApiFp)(this.configuration).organisationsQuotasList(organisation_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update an organisation
     * @summary Update an organisation
     * @param {string} organisation_id Organisation ID reference
     * @param {OrganisationBody} [OrganisationBody] Create/Update any field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    OrganisationsApi.prototype.organisationsUpdate = function (organisation_id, OrganisationBody, options) {
        var _this = this;
        return (0, exports.OrganisationsApiFp)(this.configuration).organisationsUpdate(organisation_id, OrganisationBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OrganisationsApi;
}(base_1.BaseAPI));
exports.OrganisationsApi = OrganisationsApi;
/**
 * ProjectsApi - axios parameter creator
 */
var ProjectsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get all the projects linked to a specific organisation
         * @summary Get all projects within an organisation
         * @param {string} organisation_id Organisation ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {string} [f_name] Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsProjectsList: function (organisation_id_1, page_1, f_name_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([organisation_id_1, page_1, f_name_1], args_1, true), void 0, function (organisation_id, page, f_name, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            // verify required parameter 'organisation_id' is not null or undefined
                            (0, common_1.assertParamExists)('organisationsProjectsList', 'organisation_id', organisation_id);
                            localVarPath = "/organisations/{organisation_id}/projects"
                                .replace("{".concat("organisation_id", "}"), encodeURIComponent(String(organisation_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _d.sent();
                            if (page !== undefined) {
                                for (_a = 0, _b = Object.entries(page); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (f_name !== undefined) {
                                localVarQueryParameter['f_name'] = f_name;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a new project
         * @summary Create project
         * @param {ProjectBody} [ProjectBody] Create/Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreate: function (ProjectBody_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([ProjectBody_1], args_1, true), void 0, function (ProjectBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/projects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(ProjectBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete project, this will also delete all the resources within the project
         * @summary Delete project
         * @param {string} project_id Project ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsDelete: function (project_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1], args_1, true), void 0, function (project_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsDelete', 'project_id', project_id);
                            localVarPath = "/projects/{project_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a specific project
         * @summary Get project
         * @param {string} project_id Project ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet: function (project_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1], args_1, true), void 0, function (project_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsGet', 'project_id', project_id);
                            localVarPath = "/projects/{project_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get all projects for this user, paginated
         * @summary List projects
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {string} [f_name] Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsList: function (page_1, f_name_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([page_1, f_name_1], args_1, true), void 0, function (page, f_name, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/projects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _d.sent();
                            if (page !== undefined) {
                                for (_a = 0, _b = Object.entries(page); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (f_name !== undefined) {
                                localVarQueryParameter['f_name'] = f_name;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a specific quota for a project
         * @summary Get specific project quota
         * @param {string} project_id Project ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQuotasGet: function (project_id_1, quota_entity_quota_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, quota_entity_quota_1], args_1, true), void 0, function (project_id, quota_entity_quota, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsQuotasGet', 'project_id', project_id);
                            // verify required parameter 'quota_entity_quota' is not null or undefined
                            (0, common_1.assertParamExists)('projectsQuotasGet', 'quota_entity_quota', quota_entity_quota);
                            localVarPath = "/projects/{project_id}/quotas/{quota_entity_quota}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)))
                                .replace("{".concat("quota_entity_quota", "}"), encodeURIComponent(String(quota_entity_quota)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get the quotas for a project
         * @summary List project quotas
         * @param {string} project_id Project ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQuotasList: function (project_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1], args_1, true), void 0, function (project_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsQuotasList', 'project_id', project_id);
                            localVarPath = "/projects/{project_id}/quotas"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update project
         * @summary Update project
         * @param {string} project_id Project ID reference
         * @param {ProjectBodyPatch} [ProjectBodyPatch] Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsUpdate: function (project_id_1, ProjectBodyPatch_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, ProjectBodyPatch_1], args_1, true), void 0, function (project_id, ProjectBodyPatch, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsUpdate', 'project_id', project_id);
                            localVarPath = "/projects/{project_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(ProjectBodyPatch, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ProjectsApiAxiosParamCreator = ProjectsApiAxiosParamCreator;
/**
 * ProjectsApi - functional programming interface
 */
var ProjectsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ProjectsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get all the projects linked to a specific organisation
         * @summary Get all projects within an organisation
         * @param {string} organisation_id Organisation ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {string} [f_name] Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsProjectsList: function (organisation_id, page, f_name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.organisationsProjectsList(organisation_id, page, f_name, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.organisationsProjectsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a new project
         * @summary Create project
         * @param {ProjectBody} [ProjectBody] Create/Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreate: function (ProjectBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsCreate(ProjectBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete project, this will also delete all the resources within the project
         * @summary Delete project
         * @param {string} project_id Project ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsDelete: function (project_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsDelete(project_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a specific project
         * @summary Get project
         * @param {string} project_id Project ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet: function (project_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsGet(project_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get all projects for this user, paginated
         * @summary List projects
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {string} [f_name] Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsList: function (page, f_name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsList(page, f_name, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a specific quota for a project
         * @summary Get specific project quota
         * @param {string} project_id Project ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQuotasGet: function (project_id, quota_entity_quota, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsQuotasGet(project_id, quota_entity_quota, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsQuotasGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get the quotas for a project
         * @summary List project quotas
         * @param {string} project_id Project ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQuotasList: function (project_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsQuotasList(project_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsQuotasList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update project
         * @summary Update project
         * @param {string} project_id Project ID reference
         * @param {ProjectBodyPatch} [ProjectBodyPatch] Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsUpdate: function (project_id, ProjectBodyPatch, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsUpdate(project_id, ProjectBodyPatch, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ProjectsApiFp = ProjectsApiFp;
/**
 * ProjectsApi - factory interface
 */
var ProjectsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ProjectsApiFp)(configuration);
    return {
        /**
         * Get all the projects linked to a specific organisation
         * @summary Get all projects within an organisation
         * @param {string} organisation_id Organisation ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {string} [f_name] Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsProjectsList: function (organisation_id, page, f_name, options) {
            return localVarFp.organisationsProjectsList(organisation_id, page, f_name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a new project
         * @summary Create project
         * @param {ProjectBody} [ProjectBody] Create/Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCreate: function (ProjectBody, options) {
            return localVarFp.projectsCreate(ProjectBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete project, this will also delete all the resources within the project
         * @summary Delete project
         * @param {string} project_id Project ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsDelete: function (project_id, options) {
            return localVarFp.projectsDelete(project_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a specific project
         * @summary Get project
         * @param {string} project_id Project ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet: function (project_id, options) {
            return localVarFp.projectsGet(project_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get all projects for this user, paginated
         * @summary List projects
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {string} [f_name] Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsList: function (page, f_name, options) {
            return localVarFp.projectsList(page, f_name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a specific quota for a project
         * @summary Get specific project quota
         * @param {string} project_id Project ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQuotasGet: function (project_id, quota_entity_quota, options) {
            return localVarFp.projectsQuotasGet(project_id, quota_entity_quota, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the quotas for a project
         * @summary List project quotas
         * @param {string} project_id Project ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQuotasList: function (project_id, options) {
            return localVarFp.projectsQuotasList(project_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update project
         * @summary Update project
         * @param {string} project_id Project ID reference
         * @param {ProjectBodyPatch} [ProjectBodyPatch] Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsUpdate: function (project_id, ProjectBodyPatch, options) {
            return localVarFp.projectsUpdate(project_id, ProjectBodyPatch, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ProjectsApiFactory = ProjectsApiFactory;
/**
 * ProjectsApi - object-oriented interface
 */
var ProjectsApi = /** @class */ (function (_super) {
    __extends(ProjectsApi, _super);
    function ProjectsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get all the projects linked to a specific organisation
     * @summary Get all projects within an organisation
     * @param {string} organisation_id Organisation ID reference
     * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
     * @param {string} [f_name] Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ProjectsApi.prototype.organisationsProjectsList = function (organisation_id, page, f_name, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).organisationsProjectsList(organisation_id, page, f_name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a new project
     * @summary Create project
     * @param {ProjectBody} [ProjectBody] Create/Update any field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ProjectsApi.prototype.projectsCreate = function (ProjectBody, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsCreate(ProjectBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete project, this will also delete all the resources within the project
     * @summary Delete project
     * @param {string} project_id Project ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ProjectsApi.prototype.projectsDelete = function (project_id, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsDelete(project_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a specific project
     * @summary Get project
     * @param {string} project_id Project ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ProjectsApi.prototype.projectsGet = function (project_id, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsGet(project_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get all projects for this user, paginated
     * @summary List projects
     * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
     * @param {string} [f_name] Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ProjectsApi.prototype.projectsList = function (page, f_name, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsList(page, f_name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a specific quota for a project
     * @summary Get specific project quota
     * @param {string} project_id Project ID reference
     * @param {string} quota_entity_quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ProjectsApi.prototype.projectsQuotasGet = function (project_id, quota_entity_quota, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsQuotasGet(project_id, quota_entity_quota, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the quotas for a project
     * @summary List project quotas
     * @param {string} project_id Project ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ProjectsApi.prototype.projectsQuotasList = function (project_id, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsQuotasList(project_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update project
     * @summary Update project
     * @param {string} project_id Project ID reference
     * @param {ProjectBodyPatch} [ProjectBodyPatch] Update any field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ProjectsApi.prototype.projectsUpdate = function (project_id, ProjectBodyPatch, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsUpdate(project_id, ProjectBodyPatch, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ProjectsApi;
}(base_1.BaseAPI));
exports.ProjectsApi = ProjectsApi;
/**
 * ProvidersApi - axios parameter creator
 */
var ProvidersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieve a list of all providers with their respective deployed regions and cities.
         * @summary Get available providers
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        providersList: function (page_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([page_1], args_1, true), void 0, function (page, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/providers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _d.sent();
                            if (page !== undefined) {
                                for (_a = 0, _b = Object.entries(page); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ProvidersApiAxiosParamCreator = ProvidersApiAxiosParamCreator;
/**
 * ProvidersApi - functional programming interface
 */
var ProvidersApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ProvidersApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieve a list of all providers with their respective deployed regions and cities.
         * @summary Get available providers
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        providersList: function (page, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.providersList(page, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProvidersApi.providersList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ProvidersApiFp = ProvidersApiFp;
/**
 * ProvidersApi - factory interface
 */
var ProvidersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ProvidersApiFp)(configuration);
    return {
        /**
         * Retrieve a list of all providers with their respective deployed regions and cities.
         * @summary Get available providers
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        providersList: function (page, options) {
            return localVarFp.providersList(page, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ProvidersApiFactory = ProvidersApiFactory;
/**
 * ProvidersApi - object-oriented interface
 */
var ProvidersApi = /** @class */ (function (_super) {
    __extends(ProvidersApi, _super);
    function ProvidersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieve a list of all providers with their respective deployed regions and cities.
     * @summary Get available providers
     * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ProvidersApi.prototype.providersList = function (page, options) {
        var _this = this;
        return (0, exports.ProvidersApiFp)(this.configuration).providersList(page, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ProvidersApi;
}(base_1.BaseAPI));
exports.ProvidersApi = ProvidersApi;
/**
 * QuotasApi - axios parameter creator
 */
var QuotasApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get a specific quota for an organisation
         * @summary Get specific organisation quota
         * @param {string} organisation_id Organisation ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsQuotasGet: function (organisation_id_1, quota_entity_quota_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([organisation_id_1, quota_entity_quota_1], args_1, true), void 0, function (organisation_id, quota_entity_quota, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'organisation_id' is not null or undefined
                            (0, common_1.assertParamExists)('organisationsQuotasGet', 'organisation_id', organisation_id);
                            // verify required parameter 'quota_entity_quota' is not null or undefined
                            (0, common_1.assertParamExists)('organisationsQuotasGet', 'quota_entity_quota', quota_entity_quota);
                            localVarPath = "/organisations/{organisation_id}/quotas/{quota_entity_quota}"
                                .replace("{".concat("organisation_id", "}"), encodeURIComponent(String(organisation_id)))
                                .replace("{".concat("quota_entity_quota", "}"), encodeURIComponent(String(quota_entity_quota)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get the quotas for an organisation
         * @summary List organisation quotas
         * @param {string} organisation_id Organisation ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsQuotasList: function (organisation_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([organisation_id_1], args_1, true), void 0, function (organisation_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'organisation_id' is not null or undefined
                            (0, common_1.assertParamExists)('organisationsQuotasList', 'organisation_id', organisation_id);
                            localVarPath = "/organisations/{organisation_id}/quotas"
                                .replace("{".concat("organisation_id", "}"), encodeURIComponent(String(organisation_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a specific quota for a project
         * @summary Get specific project quota
         * @param {string} project_id Project ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQuotasGet: function (project_id_1, quota_entity_quota_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, quota_entity_quota_1], args_1, true), void 0, function (project_id, quota_entity_quota, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsQuotasGet', 'project_id', project_id);
                            // verify required parameter 'quota_entity_quota' is not null or undefined
                            (0, common_1.assertParamExists)('projectsQuotasGet', 'quota_entity_quota', quota_entity_quota);
                            localVarPath = "/projects/{project_id}/quotas/{quota_entity_quota}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)))
                                .replace("{".concat("quota_entity_quota", "}"), encodeURIComponent(String(quota_entity_quota)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get the quotas for a project
         * @summary List project quotas
         * @param {string} project_id Project ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQuotasList: function (project_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1], args_1, true), void 0, function (project_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsQuotasList', 'project_id', project_id);
                            localVarPath = "/projects/{project_id}/quotas"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a specific quota for a user
         * @summary Get specific user quota
         * @param {string} user_id User ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQuotasGet: function (user_id_1, quota_entity_quota_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([user_id_1, quota_entity_quota_1], args_1, true), void 0, function (user_id, quota_entity_quota, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'user_id' is not null or undefined
                            (0, common_1.assertParamExists)('usersQuotasGet', 'user_id', user_id);
                            // verify required parameter 'quota_entity_quota' is not null or undefined
                            (0, common_1.assertParamExists)('usersQuotasGet', 'quota_entity_quota', quota_entity_quota);
                            localVarPath = "/users/{user_id}/quotas/{quota_entity_quota}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(user_id)))
                                .replace("{".concat("quota_entity_quota", "}"), encodeURIComponent(String(quota_entity_quota)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get the quotas for a user
         * @summary List user quotas
         * @param {string} user_id User ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQuotasList: function (user_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([user_id_1], args_1, true), void 0, function (user_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'user_id' is not null or undefined
                            (0, common_1.assertParamExists)('usersQuotasList', 'user_id', user_id);
                            localVarPath = "/users/{user_id}/quotas"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(user_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.QuotasApiAxiosParamCreator = QuotasApiAxiosParamCreator;
/**
 * QuotasApi - functional programming interface
 */
var QuotasApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.QuotasApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get a specific quota for an organisation
         * @summary Get specific organisation quota
         * @param {string} organisation_id Organisation ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsQuotasGet: function (organisation_id, quota_entity_quota, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.organisationsQuotasGet(organisation_id, quota_entity_quota, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['QuotasApi.organisationsQuotasGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get the quotas for an organisation
         * @summary List organisation quotas
         * @param {string} organisation_id Organisation ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsQuotasList: function (organisation_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.organisationsQuotasList(organisation_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['QuotasApi.organisationsQuotasList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a specific quota for a project
         * @summary Get specific project quota
         * @param {string} project_id Project ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQuotasGet: function (project_id, quota_entity_quota, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsQuotasGet(project_id, quota_entity_quota, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['QuotasApi.projectsQuotasGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get the quotas for a project
         * @summary List project quotas
         * @param {string} project_id Project ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQuotasList: function (project_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsQuotasList(project_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['QuotasApi.projectsQuotasList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a specific quota for a user
         * @summary Get specific user quota
         * @param {string} user_id User ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQuotasGet: function (user_id, quota_entity_quota, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersQuotasGet(user_id, quota_entity_quota, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['QuotasApi.usersQuotasGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get the quotas for a user
         * @summary List user quotas
         * @param {string} user_id User ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQuotasList: function (user_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersQuotasList(user_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['QuotasApi.usersQuotasList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.QuotasApiFp = QuotasApiFp;
/**
 * QuotasApi - factory interface
 */
var QuotasApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.QuotasApiFp)(configuration);
    return {
        /**
         * Get a specific quota for an organisation
         * @summary Get specific organisation quota
         * @param {string} organisation_id Organisation ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsQuotasGet: function (organisation_id, quota_entity_quota, options) {
            return localVarFp.organisationsQuotasGet(organisation_id, quota_entity_quota, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the quotas for an organisation
         * @summary List organisation quotas
         * @param {string} organisation_id Organisation ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsQuotasList: function (organisation_id, options) {
            return localVarFp.organisationsQuotasList(organisation_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a specific quota for a project
         * @summary Get specific project quota
         * @param {string} project_id Project ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQuotasGet: function (project_id, quota_entity_quota, options) {
            return localVarFp.projectsQuotasGet(project_id, quota_entity_quota, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the quotas for a project
         * @summary List project quotas
         * @param {string} project_id Project ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQuotasList: function (project_id, options) {
            return localVarFp.projectsQuotasList(project_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a specific quota for a user
         * @summary Get specific user quota
         * @param {string} user_id User ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQuotasGet: function (user_id, quota_entity_quota, options) {
            return localVarFp.usersQuotasGet(user_id, quota_entity_quota, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the quotas for a user
         * @summary List user quotas
         * @param {string} user_id User ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQuotasList: function (user_id, options) {
            return localVarFp.usersQuotasList(user_id, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.QuotasApiFactory = QuotasApiFactory;
/**
 * QuotasApi - object-oriented interface
 */
var QuotasApi = /** @class */ (function (_super) {
    __extends(QuotasApi, _super);
    function QuotasApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get a specific quota for an organisation
     * @summary Get specific organisation quota
     * @param {string} organisation_id Organisation ID reference
     * @param {string} quota_entity_quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    QuotasApi.prototype.organisationsQuotasGet = function (organisation_id, quota_entity_quota, options) {
        var _this = this;
        return (0, exports.QuotasApiFp)(this.configuration).organisationsQuotasGet(organisation_id, quota_entity_quota, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the quotas for an organisation
     * @summary List organisation quotas
     * @param {string} organisation_id Organisation ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    QuotasApi.prototype.organisationsQuotasList = function (organisation_id, options) {
        var _this = this;
        return (0, exports.QuotasApiFp)(this.configuration).organisationsQuotasList(organisation_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a specific quota for a project
     * @summary Get specific project quota
     * @param {string} project_id Project ID reference
     * @param {string} quota_entity_quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    QuotasApi.prototype.projectsQuotasGet = function (project_id, quota_entity_quota, options) {
        var _this = this;
        return (0, exports.QuotasApiFp)(this.configuration).projectsQuotasGet(project_id, quota_entity_quota, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the quotas for a project
     * @summary List project quotas
     * @param {string} project_id Project ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    QuotasApi.prototype.projectsQuotasList = function (project_id, options) {
        var _this = this;
        return (0, exports.QuotasApiFp)(this.configuration).projectsQuotasList(project_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a specific quota for a user
     * @summary Get specific user quota
     * @param {string} user_id User ID reference
     * @param {string} quota_entity_quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    QuotasApi.prototype.usersQuotasGet = function (user_id, quota_entity_quota, options) {
        var _this = this;
        return (0, exports.QuotasApiFp)(this.configuration).usersQuotasGet(user_id, quota_entity_quota, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the quotas for a user
     * @summary List user quotas
     * @param {string} user_id User ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    QuotasApi.prototype.usersQuotasList = function (user_id, options) {
        var _this = this;
        return (0, exports.QuotasApiFp)(this.configuration).usersQuotasList(user_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return QuotasApi;
}(base_1.BaseAPI));
exports.QuotasApi = QuotasApi;
/**
 * SecretsApi - axios parameter creator
 */
var SecretsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a new project secret
         * @summary Create project secret
         * @param {string} project_id Project ID reference
         * @param {SecretBody} SecretBody Create/Update any field  The example generated may only be for one of the secret types, look towards the payload section of the schema for further fields, values and examples.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsCreate: function (project_id_1, SecretBody_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, SecretBody_1], args_1, true), void 0, function (project_id, SecretBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsSecretsCreate', 'project_id', project_id);
                            // verify required parameter 'SecretBody' is not null or undefined
                            (0, common_1.assertParamExists)('projectsSecretsCreate', 'SecretBody', SecretBody);
                            localVarPath = "/projects/{project_id}/secrets"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(SecretBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete project secret, if the secret is still linked to an active/deployed function - it cannot be removed
         * @summary Delete project secret
         * @param {string} project_id Project ID reference
         * @param {string} secret_name Unique secret name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsDelete: function (project_id_1, secret_name_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, secret_name_1], args_1, true), void 0, function (project_id, secret_name, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsSecretsDelete', 'project_id', project_id);
                            // verify required parameter 'secret_name' is not null or undefined
                            (0, common_1.assertParamExists)('projectsSecretsDelete', 'secret_name', secret_name);
                            localVarPath = "/projects/{project_id}/secrets/{secret_name}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)))
                                .replace("{".concat("secret_name", "}"), encodeURIComponent(String(secret_name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a specific project
         * @summary Get project secret
         * @param {string} project_id Project ID reference
         * @param {string} secret_name Unique secret name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsGet: function (project_id_1, secret_name_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, secret_name_1], args_1, true), void 0, function (project_id, secret_name, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsSecretsGet', 'project_id', project_id);
                            // verify required parameter 'secret_name' is not null or undefined
                            (0, common_1.assertParamExists)('projectsSecretsGet', 'secret_name', secret_name);
                            localVarPath = "/projects/{project_id}/secrets/{secret_name}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)))
                                .replace("{".concat("secret_name", "}"), encodeURIComponent(String(secret_name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List project secrets of a specific type
         * @summary List project secrets of a specific type
         * @param {string} project_id Project ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {SecretMetaType} [secret_type] Type of secret to filter on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsList: function (project_id_1, page_1, secret_type_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, page_1, secret_type_1], args_1, true), void 0, function (project_id, page, secret_type, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsSecretsList', 'project_id', project_id);
                            localVarPath = "/projects/{project_id}/secrets"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _d.sent();
                            if (page !== undefined) {
                                for (_a = 0, _b = Object.entries(page); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (secret_type !== undefined) {
                                localVarQueryParameter['secret_type'] = secret_type;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update project
         * @summary Update project secret
         * @param {string} project_id Project ID reference
         * @param {string} secret_name Unique secret name
         * @param {SecretBodyPatch} SecretBodyPatch Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsUpdate: function (project_id_1, secret_name_1, SecretBodyPatch_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_id_1, secret_name_1, SecretBodyPatch_1], args_1, true), void 0, function (project_id, secret_name, SecretBodyPatch, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'project_id' is not null or undefined
                            (0, common_1.assertParamExists)('projectsSecretsUpdate', 'project_id', project_id);
                            // verify required parameter 'secret_name' is not null or undefined
                            (0, common_1.assertParamExists)('projectsSecretsUpdate', 'secret_name', secret_name);
                            // verify required parameter 'SecretBodyPatch' is not null or undefined
                            (0, common_1.assertParamExists)('projectsSecretsUpdate', 'SecretBodyPatch', SecretBodyPatch);
                            localVarPath = "/projects/{project_id}/secrets/{secret_name}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)))
                                .replace("{".concat("secret_name", "}"), encodeURIComponent(String(secret_name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(SecretBodyPatch, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SecretsApiAxiosParamCreator = SecretsApiAxiosParamCreator;
/**
 * SecretsApi - functional programming interface
 */
var SecretsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SecretsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a new project secret
         * @summary Create project secret
         * @param {string} project_id Project ID reference
         * @param {SecretBody} SecretBody Create/Update any field  The example generated may only be for one of the secret types, look towards the payload section of the schema for further fields, values and examples.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsCreate: function (project_id, SecretBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsSecretsCreate(project_id, SecretBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SecretsApi.projectsSecretsCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete project secret, if the secret is still linked to an active/deployed function - it cannot be removed
         * @summary Delete project secret
         * @param {string} project_id Project ID reference
         * @param {string} secret_name Unique secret name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsDelete: function (project_id, secret_name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsSecretsDelete(project_id, secret_name, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SecretsApi.projectsSecretsDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a specific project
         * @summary Get project secret
         * @param {string} project_id Project ID reference
         * @param {string} secret_name Unique secret name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsGet: function (project_id, secret_name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsSecretsGet(project_id, secret_name, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SecretsApi.projectsSecretsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List project secrets of a specific type
         * @summary List project secrets of a specific type
         * @param {string} project_id Project ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {SecretMetaType} [secret_type] Type of secret to filter on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsList: function (project_id, page, secret_type, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsSecretsList(project_id, page, secret_type, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SecretsApi.projectsSecretsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update project
         * @summary Update project secret
         * @param {string} project_id Project ID reference
         * @param {string} secret_name Unique secret name
         * @param {SecretBodyPatch} SecretBodyPatch Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsUpdate: function (project_id, secret_name, SecretBodyPatch, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsSecretsUpdate(project_id, secret_name, SecretBodyPatch, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SecretsApi.projectsSecretsUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SecretsApiFp = SecretsApiFp;
/**
 * SecretsApi - factory interface
 */
var SecretsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SecretsApiFp)(configuration);
    return {
        /**
         * Create a new project secret
         * @summary Create project secret
         * @param {string} project_id Project ID reference
         * @param {SecretBody} SecretBody Create/Update any field  The example generated may only be for one of the secret types, look towards the payload section of the schema for further fields, values and examples.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsCreate: function (project_id, SecretBody, options) {
            return localVarFp.projectsSecretsCreate(project_id, SecretBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete project secret, if the secret is still linked to an active/deployed function - it cannot be removed
         * @summary Delete project secret
         * @param {string} project_id Project ID reference
         * @param {string} secret_name Unique secret name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsDelete: function (project_id, secret_name, options) {
            return localVarFp.projectsSecretsDelete(project_id, secret_name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a specific project
         * @summary Get project secret
         * @param {string} project_id Project ID reference
         * @param {string} secret_name Unique secret name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsGet: function (project_id, secret_name, options) {
            return localVarFp.projectsSecretsGet(project_id, secret_name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List project secrets of a specific type
         * @summary List project secrets of a specific type
         * @param {string} project_id Project ID reference
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {SecretMetaType} [secret_type] Type of secret to filter on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsList: function (project_id, page, secret_type, options) {
            return localVarFp.projectsSecretsList(project_id, page, secret_type, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update project
         * @summary Update project secret
         * @param {string} project_id Project ID reference
         * @param {string} secret_name Unique secret name
         * @param {SecretBodyPatch} SecretBodyPatch Update any field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSecretsUpdate: function (project_id, secret_name, SecretBodyPatch, options) {
            return localVarFp.projectsSecretsUpdate(project_id, secret_name, SecretBodyPatch, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SecretsApiFactory = SecretsApiFactory;
/**
 * SecretsApi - object-oriented interface
 */
var SecretsApi = /** @class */ (function (_super) {
    __extends(SecretsApi, _super);
    function SecretsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new project secret
     * @summary Create project secret
     * @param {string} project_id Project ID reference
     * @param {SecretBody} SecretBody Create/Update any field  The example generated may only be for one of the secret types, look towards the payload section of the schema for further fields, values and examples.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    SecretsApi.prototype.projectsSecretsCreate = function (project_id, SecretBody, options) {
        var _this = this;
        return (0, exports.SecretsApiFp)(this.configuration).projectsSecretsCreate(project_id, SecretBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete project secret, if the secret is still linked to an active/deployed function - it cannot be removed
     * @summary Delete project secret
     * @param {string} project_id Project ID reference
     * @param {string} secret_name Unique secret name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    SecretsApi.prototype.projectsSecretsDelete = function (project_id, secret_name, options) {
        var _this = this;
        return (0, exports.SecretsApiFp)(this.configuration).projectsSecretsDelete(project_id, secret_name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a specific project
     * @summary Get project secret
     * @param {string} project_id Project ID reference
     * @param {string} secret_name Unique secret name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    SecretsApi.prototype.projectsSecretsGet = function (project_id, secret_name, options) {
        var _this = this;
        return (0, exports.SecretsApiFp)(this.configuration).projectsSecretsGet(project_id, secret_name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List project secrets of a specific type
     * @summary List project secrets of a specific type
     * @param {string} project_id Project ID reference
     * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
     * @param {SecretMetaType} [secret_type] Type of secret to filter on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    SecretsApi.prototype.projectsSecretsList = function (project_id, page, secret_type, options) {
        var _this = this;
        return (0, exports.SecretsApiFp)(this.configuration).projectsSecretsList(project_id, page, secret_type, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update project
     * @summary Update project secret
     * @param {string} project_id Project ID reference
     * @param {string} secret_name Unique secret name
     * @param {SecretBodyPatch} SecretBodyPatch Update any field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    SecretsApi.prototype.projectsSecretsUpdate = function (project_id, secret_name, SecretBodyPatch, options) {
        var _this = this;
        return (0, exports.SecretsApiFp)(this.configuration).projectsSecretsUpdate(project_id, secret_name, SecretBodyPatch, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SecretsApi;
}(base_1.BaseAPI));
exports.SecretsApi = SecretsApi;
/**
 * TokensApi - axios parameter creator
 */
var TokensApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create new auth token for use with the CLI and TF Provider  ### Warning The `token` field is only shown once and can\'t be retrieved again without generating a new token. Securely save this once the response has been received.
         * @summary Create new auth token
         * @param {AuthTokenBody} AuthTokenBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensCreate: function (AuthTokenBody_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([AuthTokenBody_1], args_1, true), void 0, function (AuthTokenBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'AuthTokenBody' is not null or undefined
                            (0, common_1.assertParamExists)('authTokensCreate', 'AuthTokenBody', AuthTokenBody);
                            localVarPath = "/auth/tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AuthTokenBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete token
         * @param {string} token_id Token ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensDelete: function (token_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([token_id_1], args_1, true), void 0, function (token_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'token_id' is not null or undefined
                            (0, common_1.assertParamExists)('authTokensDelete', 'token_id', token_id);
                            localVarPath = "/auth/tokens/{token_id}"
                                .replace("{".concat("token_id", "}"), encodeURIComponent(String(token_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get token information
         * @param {string} token_id Token ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensGet: function (token_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([token_id_1], args_1, true), void 0, function (token_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'token_id' is not null or undefined
                            (0, common_1.assertParamExists)('authTokensGet', 'token_id', token_id);
                            localVarPath = "/auth/tokens/{token_id}"
                                .replace("{".concat("token_id", "}"), encodeURIComponent(String(token_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List all user auth tokens
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensList: function (page_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([page_1], args_1, true), void 0, function (page, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/auth/tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _d.sent();
                            if (page !== undefined) {
                                for (_a = 0, _b = Object.entries(page); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update token
         * @param {string} token_id Token ID reference
         * @param {AuthTokenPatch} AuthTokenPatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensUpdate: function (token_id_1, AuthTokenPatch_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([token_id_1, AuthTokenPatch_1], args_1, true), void 0, function (token_id, AuthTokenPatch, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'token_id' is not null or undefined
                            (0, common_1.assertParamExists)('authTokensUpdate', 'token_id', token_id);
                            // verify required parameter 'AuthTokenPatch' is not null or undefined
                            (0, common_1.assertParamExists)('authTokensUpdate', 'AuthTokenPatch', AuthTokenPatch);
                            localVarPath = "/auth/tokens/{token_id}"
                                .replace("{".concat("token_id", "}"), encodeURIComponent(String(token_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AuthTokenPatch, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TokensApiAxiosParamCreator = TokensApiAxiosParamCreator;
/**
 * TokensApi - functional programming interface
 */
var TokensApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TokensApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create new auth token for use with the CLI and TF Provider  ### Warning The `token` field is only shown once and can\'t be retrieved again without generating a new token. Securely save this once the response has been received.
         * @summary Create new auth token
         * @param {AuthTokenBody} AuthTokenBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensCreate: function (AuthTokenBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authTokensCreate(AuthTokenBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.authTokensCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete token
         * @param {string} token_id Token ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensDelete: function (token_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authTokensDelete(token_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.authTokensDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get token information
         * @param {string} token_id Token ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensGet: function (token_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authTokensGet(token_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.authTokensGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary List all user auth tokens
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensList: function (page, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authTokensList(page, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.authTokensList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update token
         * @param {string} token_id Token ID reference
         * @param {AuthTokenPatch} AuthTokenPatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensUpdate: function (token_id, AuthTokenPatch, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authTokensUpdate(token_id, AuthTokenPatch, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TokensApi.authTokensUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.TokensApiFp = TokensApiFp;
/**
 * TokensApi - factory interface
 */
var TokensApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TokensApiFp)(configuration);
    return {
        /**
         * Create new auth token for use with the CLI and TF Provider  ### Warning The `token` field is only shown once and can\'t be retrieved again without generating a new token. Securely save this once the response has been received.
         * @summary Create new auth token
         * @param {AuthTokenBody} AuthTokenBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensCreate: function (AuthTokenBody, options) {
            return localVarFp.authTokensCreate(AuthTokenBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete token
         * @param {string} token_id Token ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensDelete: function (token_id, options) {
            return localVarFp.authTokensDelete(token_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get token information
         * @param {string} token_id Token ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensGet: function (token_id, options) {
            return localVarFp.authTokensGet(token_id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List all user auth tokens
         * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensList: function (page, options) {
            return localVarFp.authTokensList(page, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Update token
         * @param {string} token_id Token ID reference
         * @param {AuthTokenPatch} AuthTokenPatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensUpdate: function (token_id, AuthTokenPatch, options) {
            return localVarFp.authTokensUpdate(token_id, AuthTokenPatch, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TokensApiFactory = TokensApiFactory;
/**
 * TokensApi - object-oriented interface
 */
var TokensApi = /** @class */ (function (_super) {
    __extends(TokensApi, _super);
    function TokensApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create new auth token for use with the CLI and TF Provider  ### Warning The `token` field is only shown once and can\'t be retrieved again without generating a new token. Securely save this once the response has been received.
     * @summary Create new auth token
     * @param {AuthTokenBody} AuthTokenBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    TokensApi.prototype.authTokensCreate = function (AuthTokenBody, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).authTokensCreate(AuthTokenBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete token
     * @param {string} token_id Token ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    TokensApi.prototype.authTokensDelete = function (token_id, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).authTokensDelete(token_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get token information
     * @param {string} token_id Token ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    TokensApi.prototype.authTokensGet = function (token_id, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).authTokensGet(token_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List all user auth tokens
     * @param {OrganisationsListPageParameter} [page] Query parameters for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    TokensApi.prototype.authTokensList = function (page, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).authTokensList(page, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Update token
     * @param {string} token_id Token ID reference
     * @param {AuthTokenPatch} AuthTokenPatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    TokensApi.prototype.authTokensUpdate = function (token_id, AuthTokenPatch, options) {
        var _this = this;
        return (0, exports.TokensApiFp)(this.configuration).authTokensUpdate(token_id, AuthTokenPatch, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TokensApi;
}(base_1.BaseAPI));
exports.TokensApi = TokensApi;
/**
 * UsersApi - axios parameter creator
 */
var UsersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get a specific quota for a user
         * @summary Get specific user quota
         * @param {string} user_id User ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQuotasGet: function (user_id_1, quota_entity_quota_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([user_id_1, quota_entity_quota_1], args_1, true), void 0, function (user_id, quota_entity_quota, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'user_id' is not null or undefined
                            (0, common_1.assertParamExists)('usersQuotasGet', 'user_id', user_id);
                            // verify required parameter 'quota_entity_quota' is not null or undefined
                            (0, common_1.assertParamExists)('usersQuotasGet', 'quota_entity_quota', quota_entity_quota);
                            localVarPath = "/users/{user_id}/quotas/{quota_entity_quota}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(user_id)))
                                .replace("{".concat("quota_entity_quota", "}"), encodeURIComponent(String(quota_entity_quota)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get the quotas for a user
         * @summary List user quotas
         * @param {string} user_id User ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQuotasList: function (user_id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([user_id_1], args_1, true), void 0, function (user_id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'user_id' is not null or undefined
                            (0, common_1.assertParamExists)('usersQuotasList', 'user_id', user_id);
                            localVarPath = "/users/{user_id}/quotas"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(user_id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication cookie required
                            // authentication token required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator;
/**
 * UsersApi - functional programming interface
 */
var UsersApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.UsersApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get a specific quota for a user
         * @summary Get specific user quota
         * @param {string} user_id User ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQuotasGet: function (user_id, quota_entity_quota, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersQuotasGet(user_id, quota_entity_quota, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersQuotasGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get the quotas for a user
         * @summary List user quotas
         * @param {string} user_id User ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQuotasList: function (user_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersQuotasList(user_id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersQuotasList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.UsersApiFp = UsersApiFp;
/**
 * UsersApi - factory interface
 */
var UsersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.UsersApiFp)(configuration);
    return {
        /**
         * Get a specific quota for a user
         * @summary Get specific user quota
         * @param {string} user_id User ID reference
         * @param {string} quota_entity_quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQuotasGet: function (user_id, quota_entity_quota, options) {
            return localVarFp.usersQuotasGet(user_id, quota_entity_quota, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the quotas for a user
         * @summary List user quotas
         * @param {string} user_id User ID reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersQuotasList: function (user_id, options) {
            return localVarFp.usersQuotasList(user_id, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UsersApiFactory = UsersApiFactory;
/**
 * UsersApi - object-oriented interface
 */
var UsersApi = /** @class */ (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get a specific quota for a user
     * @summary Get specific user quota
     * @param {string} user_id User ID reference
     * @param {string} quota_entity_quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    UsersApi.prototype.usersQuotasGet = function (user_id, quota_entity_quota, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersQuotasGet(user_id, quota_entity_quota, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the quotas for a user
     * @summary List user quotas
     * @param {string} user_id User ID reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    UsersApi.prototype.usersQuotasList = function (user_id, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersQuotasList(user_id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UsersApi;
}(base_1.BaseAPI));
exports.UsersApi = UsersApi;
